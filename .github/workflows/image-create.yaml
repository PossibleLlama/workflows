on:
  workflow_call:
    inputs:
      image-name:
        required: false
        default: ""
        type: string
        description: "Name of the image, by default it is empty. If not set, will use repository name"
      image-tag:
        required: false
        default: ""
        type: string
        description: "Tag to assign, by default it is empty. The commit sha is always used in addition to this tag"
      image-labels:
        required: false
        default: ""
        type: string
        description: "Labels to add to the image, by default it is empty"
      image-build-args:
        required: false
        default: ""
        type: string
        description: "Build arguments to pass to the image, by default it is empty"
      image-platforms:
        required: false
        default: "linux/amd64,linux/arm/v7"
        type: string
        description: "Platforms to build for, by default linux/amd64,linux/arm/v7"
      image-upload:
        required: false
        default: false
        type: boolean
        description: "Push the image to the registry, by default it is false"
      login-aws:
        required: false
        default: false
        type: boolean
        description: "Login to AWS ECR, by default it is false. If true, expects aws-region, aws-access-key-id and aws-secret-access-key to be set"
      aws-registry:
        required: false
        default: ""
        type: string
        description: "AWS ECR registry to push to"
      aws-region:
        required: false
        default: ""
        type: string
        description: "AWS region to use for ECR login"
      login-ghcr:
        required: false
        default: false
        type: boolean
        description: "Login to GitHub Container Registry, by default it is false"
      ghcr-username:
        required: false
        default: ""
        type: string
        description: "GitHub Container Registry username to use for login"
    secrets:
      aws-access-key-id:
        required: false
        description: "AWS access key ID to use for ECR login"
      aws-secret-access-key:
        required: false
        description: "AWS secret access key to use for ECR login"
      ghcr-token:
        required: false
        description: "GitHub Container Registry token to use for login"
    outputs:
      image:
        description: "The full name of the image. Only use if image-upload is true"
        value: ${{ jobs.Create.outputs.image }}

jobs:
  Create:
    name: Create container image
    runs-on: ubuntu-latest
    if: ${{ inputs.login-aws || inputs.login-ghcr }}
    outputs:
      image: ${{ steps.set-output-aws.outputs.image }}${{ steps.set-output-ghcr.outputs.image }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to AWS
        uses: aws-actions/configure-aws-credentials@v4
        if: ${{ !cancelled() && inputs.login-aws }}
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        if: ${{ !cancelled() && inputs.login-aws }}
        with:
          mask-password: "true"

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: ${{ !cancelled() && inputs.login-ghcr }}
        with:
          registry: ghcr.io
          username: ${{ inputs.ghcr-username }}
          password: ${{ secrets.ghcr-token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Docker meta
        id: meta-aws
        uses: docker/metadata-action@v4
        if: ${{ !cancelled() && inputs.login-aws }}
        with:
          images: |
            ${{ inputs.image-name }},enable=${{ inputs.image-name != '' && startsWith(inputs.image-name, steps.login-ecr.outputs.registry) }}
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image-name }},enable=${{ inputs.image-name != '' && !startsWith(inputs.image-name, steps.login-ecr.outputs.registry) }}
            ${{ steps.login-ecr.outputs.registry }}/${{ inputs.aws-registry }},enable=${{ inputs.login-aws && inputs.image-name == '' && inputs.aws-registry != '' }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ inputs.image-tag }},enable=${{ inputs.image-tag != '' }}
          labels: |
            ${{ inputs.image-labels }}

      - name: Docker meta
        id: meta-ghcr
        uses: docker/metadata-action@v4
        if: ${{ !cancelled() && inputs.login-ghcr }}
        with:
          images: |
            ${{ inputs.image-name }},enable=${{ inputs.image-name != '' && startsWith(inputs.image-name, 'ghcr.io/') }}
            ghcr.io/${{ inputs.image-name }},enable=${{ inputs.image-name != '' && !startsWith(inputs.image-name, 'ghcr.io/') }}
            ghcr.io/${{ github.repository }},enable=${{ inputs.login-ghcr && inputs.image-name == '' }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ inputs.image-tag }},enable=${{ inputs.image-tag != '' }}
          labels: |
            ${{ inputs.image-labels }}

      - name: Build and push
        id: build-aws
        uses: docker/build-push-action@v5
        if: ${{ !cancelled() && inputs.login-aws }}
        with:
          push: ${{ inputs.image-upload }}
          platforms: ${{ inputs.image-platforms }}
          tags: ${{ steps.meta-aws.outputs.tags }}
          labels: ${{ steps.meta-aws.outputs.labels }}
          build-args: |
            ${{ inputs.image-build-args }}
          annotations: ${{ steps.meta-aws.outputs.annotations }}

      - name: Build and push
        id: build-ghcr
        uses: docker/build-push-action@v5
        if: ${{ !cancelled() && inputs.login-ghcr }}
        with:
          push: ${{ inputs.image-upload }}
          platforms: ${{ inputs.image-platforms }}
          tags: ${{ steps.meta-ghcr.outputs.tags }}
          labels: ${{ steps.meta-ghcr.outputs.labels }}
          build-args: |
            ${{ inputs.image-build-args }}
          annotations: ${{ steps.meta-ghcr.outputs.annotations }}

      - name: Set output
        id: set-output-aws
        if: ${{ !cancelled() && inputs.login-aws && inputs.image-upload }}
        run: echo "image=${{ fromJSON(steps.meta-aws.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT
        
      - name: Set output
        id: set-output-ghcr
        if: ${{ !cancelled() && inputs.login-ghcr && inputs.image-upload }}
        run: echo "image=${{ fromJSON(steps.meta-ghcr.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT
